/*	< 오버로딩  >
 *  자바 
 *   1번째줄 => package명 (한번만 사용이 가능)
 *   2번째줄 => import (여러번 사용이 가능)
 *   3번째줄 => 
 *   public class className{
 *   	필요한 변수 설정 => 멤버변수
 *   	변수에 대한 초기화 => 생성자
 *   	기능 => 메소드
 *   }
 * 
 * 	 ===> 다른 클래스에 사용시에는
 * 		  import com.sist.opp.* => 폴더를 \\가 아니라 .으로 표현
 * 
 * 		    패키지
 * 			com.회사명.기능명 => com.sist.client , com.sist.server
 * 			org.조직명.기능명 => org.springframework.web.servlet.view*
 * 
 * 		    캡슐화
 * 		 	= 변수는 private
 * 			= 메소드는 public ==> 변수 (getter/setter)
 * 		    상속
 * 			= extends : 기종의 클래스를 기능을 가지고 온다
 * 						단일 상속만 가능
 * 		    다형성
 *			= 수정 , 추가 
 *
 *		  =================================== 문법사항이 아니라 권장사항 
 * 	
 *	   오버로딩 (생성자에서 주로 사용)
 *	 	= 같은 메소드명으로 여러개의 기능을 만든다
 *		  1. 매개변수가 다르다 (갯수나 데이터형이 다르다)
 *		  2. 리턴형은 관계없다
 *		  3. 같은 클래스내에서 만든다 
 *
 *		  plus() : 
 *		  int + int =====> plusInt(int a,int b)
 *		  double + double ===> plusDouble(double d,double 1)
 *		  int + double ==> plusIntDouble(int a,double d)
 *		  String + String ==> plusString(String s1,String s2)
 *		  float + double
 *		  long + int
 *		  int + char
 *		  char + double
 *		  String + char
 */
// 대부분의 메소드는 인스턴스 
// static => 공통 , 마음대로 쓸 수 X   
//			  안에 인스턴스 넣을 수 X
// 인스턴스 => 마음대로 쓸 수 O 
package com.sist.oop;
class Calc{
	// 인스턴스 메소드 : new 사용 시 마다 따라 저장되는 메소드
	public void plus(int a,int b) {
		System.out.printf("%d+%d=%d\n",a,b,a+b);
	}
	public void plus(double a,double b) {
		System.out.printf("%f+%f=%f\n",a,b,a+b);
	}
	public void plus(String a,String b) {
		System.out.printf("%s+%s=%s\n",a,b,a+b);
	}
	public double plus(double c,char d) {
		return d+c;
	}
}
public class 오버로딩_중복메소드정의 {
	int a=10;
	static int b=20;
	public void disp1() {
		System.out.println(this.a); 
		System.out.println(this.b);
		// this는 충돌이 없으면 생략이 가능
		// this = 오버로딩_중복메소드정의()의 클래스 
	}
	public static void disp2() {
		System.out.println(b);
		오버로딩_중복메소드정의 aa=new 오버로딩_중복메소드정의();
		System.out.println(aa.a);
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Calc cc=new Calc(); // 메소드 전체가 저장
		cc.plus("Hello", "Java");
		cc.plus(100, 200);
		System.out.println(b);
		
		오버로딩_중복메소드정의 aa=new 오버로딩_중복메소드정의();
		System.out.println("aa="+aa);	
		System.out.println(aa.a);
	}
	
}
